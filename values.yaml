adminPassword: ''
clusterDomain: cluster.local
commonAnnotations: {}
commonLabels: {}
core:
  affinity: {}
  args: []
  automountServiceAccountToken: false
  command: []
  configOverwriteJson: ''
  configOverwriteJsonSecret: ''
  containerPorts:
    http: 8080
    https: 8443
    metrics: 8001
  containerSecurityContext:
    enabled: true
    runAsNonRoot: true
    runAsUser: 1001
  csrfKey: ''
  customLivenessProbe: {}
  customReadinessProbe: {}
  customStartupProbe: {}
  existingEnvVarsSecret: ''
  existingSecret: ''
  extraEnvVars: []
  extraEnvVarsCM: ''
  extraEnvVarsSecret: ''
  extraVolumeMounts: []
  extraVolumes: []
  hostAliases: []
  image:
    debug: false
    digest: ''
    pullPolicy: IfNotPresent
    pullSecrets: []
    registry: docker.io
    repository: bitnami/harbor-core
    tag: 2.7.1-debian-11-r2
  initContainers: []
  lifecycleHooks: {}
  livenessProbe:
    enabled: true
    failureThreshold: 6
    initialDelaySeconds: 20
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  nodeAffinityPreset:
    key: ''
    type: ''
    values: []
  nodeSelector: {}
  podAffinityPreset: ''
  podAnnotations: {}
  podAntiAffinityPreset: soft
  podLabels: {}
  podSecurityContext:
    enabled: true
    fsGroup: 1001
  priorityClassName: ''
  readinessProbe:
    enabled: true
    failureThreshold: 6
    initialDelaySeconds: 20
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  replicaCount: 1
  resources:
    limits: {}
    requests: {}
  schedulerName: ''
  secret: ''
  secretKey: ''
  secretName: ''
  service:
    ports:
      http: 80
      https: 443
      metrics: 8001
  sessionLifetime: ''
  sidecars: []
  startupProbe:
    enabled: false
    failureThreshold: 15
    initialDelaySeconds: 5
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 1
  tls:
    existingSecret: ''
  tokenCert: ''
  tokenKey: ''
  tolerations: []
  topologySpreadConstraints: []
  uaaSecret: ''
  updateStrategy:
    type: RollingUpdate
diagnosticMode:
  args:
    - infinity
  command:
    - sleep
  enabled: false
exporter:
  affinity: {}
  args: []
  automountServiceAccountToken: false
  command: []
  containerPorts:
    metrics: 8001
  containerSecurityContext:
    enabled: true
    runAsNonRoot: true
    runAsUser: 1001
  customLivenessProbe: {}
  customReadinessProbe: {}
  customStartupProbe: {}
  extraEnvVars: []
  extraEnvVarsCM: ''
  extraEnvVarsSecret: ''
  extraVolumeMounts: []
  extraVolumes: []
  hostAliases: []
  image:
    debug: false
    digest: ''
    pullPolicy: IfNotPresent
    pullSecrets: []
    registry: docker.io
    repository: bitnami/harbor-exporter
    tag: 2.7.1-debian-11-r2
  initContainers: []
  lifecycleHooks: {}
  livenessProbe:
    enabled: true
    failureThreshold: 6
    initialDelaySeconds: 20
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  nodeAffinityPreset:
    key: ''
    type: ''
    values: []
  nodeSelector: {}
  podAffinityPreset: ''
  podAnnotations: {}
  podAntiAffinityPreset: soft
  podLabels: {}
  podSecurityContext:
    enabled: true
    fsGroup: 1001
  priorityClassName: ''
  readinessProbe:
    enabled: true
    failureThreshold: 6
    initialDelaySeconds: 20
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  replicaCount: 1
  resources:
    limits: {}
    requests: {}
  schedulerName: ''
  service:
    ports:
      metrics: 8001
  serviceAccountName: ''
  sidecars: []
  startupProbe:
    enabled: false
    failureThreshold: 15
    initialDelaySeconds: 5
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 1
  tolerations: []
  topologySpreadConstraints: []
  updateStrategy:
    type: RollingUpdate
exposureType: proxy
externalDatabase:
  coreDatabase: ''
  host: localhost
  password: ''
  port: 5432
  sslmode: disable
  user: bn_harbor
externalRedis:
  coreDatabaseIndex: '0'
  host: localhost
  password: ''
  port: 6379
  registryDatabaseIndex: '2'
  sentinel:
    enabled: false
    hosts: ''
    masterSet: mymaster
externalURL: https://docker-web.inshasaki.com
extraDeploy: []
fullnameOverride: ''
global:
  imagePullSecrets: []
  imageRegistry: ''
  storageClass: ''
  cattle:
    systemProjectId: p-z4khd
ingress:
  core:
    annotations:
      ingress.kubernetes.io/proxy-body-size: '0'
      ingress.kubernetes.io/ssl-redirect: 'true'
      nginx.ingress.kubernetes.io/proxy-body-size: '0'
      nginx.ingress.kubernetes.io/ssl-redirect: 'false'
    apiVersion: ''
    controller: default
    extraHosts: []
    extraPaths: []
    extraRules: []
    extraTls: []
    hostname: docker-web.inshasaki.com
    ingressClassName: ''
    pathType: ImplementationSpecific
    secrets: []
    selfSigned: false
    tls: false
kubeVersion: ''
logLevel: debug
metrics:
  enabled: false
  path: /metrics
  serviceMonitor:
    enabled: false
    honorLabels: false
    interval: ''
    jobLabel: ''
    labels: {}
    metricRelabelings: []
    namespace: ''
    relabelings: []
    scrapeTimeout: ''
    selector: {}
nameOverride: ''
nginx:
  affinity: {}
  args: []
  behindReverseProxy: true
  command: []
  containerPorts:
    http: 8080
    https: 8443
  containerSecurityContext:
    enabled: true
    runAsNonRoot: true
    runAsUser: 1001
  customLivenessProbe: {}
  customReadinessProbe: {}
  customStartupProbe: {}
  extraEnvVars: []
  extraEnvVarsCM: ''
  extraEnvVarsSecret: ''
  extraVolumeMounts: []
  extraVolumes: []
  hostAliases: []
  image:
    debug: false
    digest: ''
    pullPolicy: IfNotPresent
    pullSecrets: []
    registry: docker.io
    repository: bitnami/nginx
    tag: 1.23.3-debian-11-r29
  initContainers: []
  lifecycleHooks: {}
  livenessProbe:
    enabled: true
    failureThreshold: 6
    initialDelaySeconds: 20
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  nodeAffinityPreset:
    key: ''
    type: ''
    values: []
  nodeSelector: {}
  podAffinityPreset: ''
  podAnnotations: {}
  podAntiAffinityPreset: soft
  podLabels: {}
  podSecurityContext:
    enabled: true
    fsGroup: 1001
  priorityClassName: ''
  readinessProbe:
    enabled: true
    failureThreshold: 6
    initialDelaySeconds: 20
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  replicaCount: 1
  resources:
    limits: {}
    requests: {}
  schedulerName: ''
  sidecars: []
  startupProbe:
    enabled: false
    failureThreshold: 15
    initialDelaySeconds: 10
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 1
  tls:
    commonName: docker-web.inshasaki.com
    enabled: true
    existingSecret: inshasaki-com
  tolerations: []
  topologySpreadConstraints: []
  updateStrategy:
    type: RollingUpdate
persistence:
  enabled: true
  imageChartStorage:
    azure:
      accountkey: base64encodedaccountkey
      accountname: accountname
      container: containername
      realm: ''
      storagePrefix: /azure/harbor/charts
    caBundleSecret: ''
    disableredirect: false
    filesystem:
      maxthreads: ''
      rootdirectory: /storage
    gcs:
      bucket: bucketname
      chunksize: ''
      encodedkey: ''
      rootdirectory: ''
    oss:
      accesskeyid: ''
      accesskeysecret: ''
      bucket: ''
      chunksize: ''
      encrypt: ''
      endpoint: ''
      internal: ''
      region: ''
      rootdirectory: ''
      secretkey: ''
      secure: ''
    s3:
      accesskey: ''
      bucket: bucketname
      chunksize: ''
      encrypt: ''
      keyid: ''
      region: us-west-1
      regionendpoint: ''
      rootdirectory: ''
      secretkey: ''
      secure: ''
      skipverify: ''
      sse: ''
      storageClass: ''
      v4auth: ''
    swift:
      accesskey: ''
      authurl: https://storage.myprovider.com/v3/auth
      authversion: ''
      chunksize: ''
      container: ''
      domain: ''
      domainid: ''
      endpointtype: ''
      insecureskipverify: ''
      password: ''
      prefix: ''
      region: ''
      secretkey: ''
      tempurlcontainerkey: ''
      tempurlmethods: ''
      tenant: ''
      tenantid: ''
      trustid: ''
      username: ''
    type: filesystem
  persistentVolumeClaim:
    registry:
      accessModes:
        - ReadWriteOnce
      annotations: {}
      existingClaim: ''
      selector: {}
      size: 5Gi
      storageClass: ''
      subPath: ''
  resourcePolicy: keep
portal:
  affinity: {}
  args: []
  automountServiceAccountToken: false
  command: []
  containerPorts:
    http: 8080
    https: 8443
  containerSecurityContext:
    enabled: true
    runAsNonRoot: true
    runAsUser: 1001
  customLivenessProbe: {}
  customReadinessProbe: {}
  customStartupProbe: {}
  extraEnvVars: []
  extraEnvVarsCM: ''
  extraEnvVarsSecret: ''
  extraVolumeMounts: []
  extraVolumes: []
  hostAliases: []
  image:
    debug: false
    digest: ''
    pullPolicy: IfNotPresent
    pullSecrets: []
    registry: docker.io
    repository: bitnami/harbor-portal
    tag: 2.7.1-debian-11-r2
  initContainers: []
  lifecycleHooks: {}
  livenessProbe:
    enabled: true
    failureThreshold: 6
    initialDelaySeconds: 20
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  nodeAffinityPreset:
    key: ''
    type: ''
    values: []
  nodeSelector: {}
  podAffinityPreset: ''
  podAnnotations: {}
  podAntiAffinityPreset: soft
  podLabels: {}
  podSecurityContext:
    enabled: true
    fsGroup: 1001
  priorityClassName: ''
  readinessProbe:
    enabled: true
    failureThreshold: 6
    initialDelaySeconds: 20
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  replicaCount: 1
  resources:
    limits: {}
    requests: {}
  schedulerName: ''
  service:
    ports:
      http: 80
      https: 443
  sidecars: []
  startupProbe:
    enabled: false
    failureThreshold: 15
    initialDelaySeconds: 5
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 1
  tls:
    existingSecret: ''
  tolerations: []
  topologySpreadConstraints: []
  updateStrategy:
    type: RollingUpdate
postgresql:
  architecture: standalone
  auth:
    enablePostgresUser: true
    existingSecret: ''
    postgresPassword: not-secure-database-password
  enabled: true
  image:
    digest: ''
    registry: docker.io
    repository: bitnami/postgresql
    tag: 13.10.0-debian-11-r4
  primary:
    extendedConfiguration: |
      max_connections = 1024
    initdb:
      scripts:
        initial-registry.sql: |
          CREATE DATABASE registry ENCODING 'UTF8';

          \c registry;

          CREATE TABLE schema_migrations(version bigint not null primary key,
          dirty boolean not null);
proxy:
  components:
    - core
  httpProxy: ''
  httpsProxy: ''
  noProxy: 127.0.0.1,localhost,.local,.internal
redis:
  architecture: standalone
  auth:
    enabled: false
    existingSecret: ''
    password: ''
  enabled: true
  sentinel:
    enabled: false
    masterSet: mymaster
    service:
      ports:
        sentinel: 26379
registry:
  affinity: {}
  automountServiceAccountToken: false
  controller:
    args: []
    command: []
    containerPorts:
      http: 8080
      https: 8443
    containerSecurityContext:
      enabled: true
      runAsNonRoot: true
      runAsUser: 1001
    customLivenessProbe: {}
    customReadinessProbe: {}
    customStartupProbe: {}
    extraEnvVars: []
    extraEnvVarsCM: ''
    extraEnvVarsSecret: ''
    extraVolumeMounts: []
    image:
      debug: false
      digest: ''
      pullPolicy: IfNotPresent
      pullSecrets: []
      registry: docker.io
      repository: bitnami/harbor-registryctl
      tag: 2.7.1-debian-11-r3
    lifecycleHooks: {}
    livenessProbe:
      enabled: true
      failureThreshold: 6
      initialDelaySeconds: 20
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    readinessProbe:
      enabled: true
      failureThreshold: 6
      initialDelaySeconds: 20
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    resources:
      limits: {}
      requests: {}
    service:
      ports:
        http: 8080
        https: 8443
    startupProbe:
      enabled: false
      failureThreshold: 15
      initialDelaySeconds: 5
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1
  credentials:
    htpasswd: >-
      harbor_registry_user:$2y$10$9L4Tc0DJbFFMB6RdSCunrOpTHdwhid4ktBJmLD00bYgqkkGOvll3m
    password: harbor_registry_password
    username: harbor_registry_user
  existingSecret: ''
  extraVolumes: []
  hostAliases: []
  initContainers: []
  middleware:
    cloudFront:
      baseurl: example.cloudfront.net
      duration: 3000s
      ipfilteredby: none
      keypairid: KEYPAIRID
      privateKeySecret: my-secret
    enabled: false
    type: cloudFront
  nodeAffinityPreset:
    key: ''
    type: ''
    values: []
  nodeSelector: {}
  podAffinityPreset: ''
  podAnnotations: {}
  podAntiAffinityPreset: soft
  podLabels: {}
  podSecurityContext:
    enabled: true
    fsGroup: 1001
  priorityClassName: ''
  relativeurls: false
  replicaCount: 1
  schedulerName: ''
  secret: ''
  server:
    args: []
    command: []
    containerPorts:
      debug: 5001
      http: 5000
      https: 5443
      metrics: 8001
    containerSecurityContext:
      enabled: true
      runAsNonRoot: true
      runAsUser: 1001
    customLivenessProbe: {}
    customReadinessProbe: {}
    customStartupProbe: {}
    extraEnvVars: []
    extraEnvVarsCM: ''
    extraEnvVarsSecret: ''
    extraVolumeMounts: []
    image:
      debug: false
      digest: ''
      pullPolicy: IfNotPresent
      pullSecrets: []
      registry: docker.io
      repository: bitnami/harbor-registry
      tag: 2.7.1-debian-11-r2
    lifecycleHooks: {}
    livenessProbe:
      enabled: true
      failureThreshold: 6
      initialDelaySeconds: 20
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    readinessProbe:
      enabled: true
      failureThreshold: 6
      initialDelaySeconds: 20
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    resources:
      limits: {}
      requests: {}
    service:
      ports:
        http: 5000
        https: 5443
        metrics: 8001
    startupProbe:
      enabled: false
      failureThreshold: 15
      initialDelaySeconds: 5
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1
  sidecars: []
  tls:
    existingSecret: ''
  tolerations: []
  topologySpreadConstraints: []
  updateStrategy:
    type: RollingUpdate
  internalTLS:
    enabled: false
service:
  annotations: {}
  clusterIP: ''
  externalTrafficPolicy: Cluster
  extraPorts: []
  loadBalancerIP: ''
  loadBalancerSourceRanges: []
  nodePorts:
    http: ''
    https: ''
  ports:
    http: 80
    https: 443
  sessionAffinity: None
  sessionAffinityConfig: {}
  type: ClusterIP
tracing:
  attributes: {}
  enabled: false
  jaeger:
    agentHost: ''
    agentPort: ''
    enabled: false
    endpoint: ''
    password: ''
    username: ''
  namespace: ''
  otel:
    compression: false
    enabled: false
    endpoint: hostname:4318
    insecure: true
    timeout: 10s
    urlpath: /v1/traces
  sampleRate: 1
volumePermissions:
  containerSecurityContext:
    enabled: true
    runAsUser: 0
  enabled: false
  image:
    digest: ''
    pullPolicy: IfNotPresent
    pullSecrets: []
    registry: docker.io
    repository: bitnami/bitnami-shell
    tag: 11-debian-11-r90
  resources:
    limits: {}
    requests: {}
